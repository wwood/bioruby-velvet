require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
require 'bio'

include Bio::Velvet
class String
  def revcom
    Bio::Sequence::NA.new(self).reverse_complement.to_s.upcase
  end
end
describe "OrderedNodeArray" do
  it 'should push and enumerable' do
    node1 = Graph::Node.new
    node1.node_id = 1

    trail = Graph::OrientedNodeTrail.new
    trail.to_a.length.should == 0
    trail.add_node node1, Graph::OrientedNodeTrail::START_IS_FIRST
    trail.to_a.length.should == 1
    trail.to_a[0].node.should == node1
    trail.to_a[0].first_side.should == Graph::OrientedNodeTrail::START_IS_FIRST

    node3 = Graph::Node.new
    node3.node_id = 3
    trail.add_node node3, Graph::OrientedNodeTrail::END_IS_FIRST
    trail.to_a.length.should == 2
    trail.to_a[0].node.should == node1
    trail.to_a[1].node.should == node3
    trail.to_a[1].first_side.should == Graph::OrientedNodeTrail::END_IS_FIRST
  end

  it 'should sequence of none and one nodes' do
    trail = Graph::OrientedNodeTrail.new
    trail.sequence.should == ''

    graph = Bio::Velvet::Graph.new
    graph.hash_length = 31
    node = Bio::Velvet::Graph::Node.new
    node.parent_graph = graph
    node.ends_of_kmers_of_node = 'AATCAAACTATAAAGTTTTAGAAGATAAAGTAACAACTTATACATGGGGATTCGGAGTTAAAAAAGTAGATTCAGAAAATATTTCAATAGATCTTGCAGGCGCAGCTTTTTCTGTTAGGGATAAAAATGGTAATGTAATTGGTAAATATACGTATGATTCTACTGGAAATGTGGTTTTATTAAAAGGAAAGGGTGTAACTGATAAAAATGGACGAGTTATATTTACTGGTTTAAAAGAAGGAGATTACTTTATAAAAGAAGAAAAAGCTCCTAAAGGGTATAGCCTTTTAAAAGAACCAGTAAAAGTTACTATAACAGCTCAAAAAGATGATAATGGAGAGTATACTGGTCAAGCAACTATATCTGTAACTAATGGCAATGAAGCTGGAAGTATAATAAATAATATTACTATGAATGATGGCAATGTATTATTTAATGTACAAATTAAAAACTATGCTGGTATTTCACTTCCAGGTACAGG'
    node.ends_of_kmers_of_twin_node = 'TTTTTAATTTGTACATTAAATAATACATTGCCATCATTCATAGTAATATTATTTATTATACTTCCAGCTTCATTGCCATTAGTTACAGATATAGTTGCTTGACCAGTATACTCTCCATTATCATCTTTTTGAGCTGTTATAGTAACTTTTACTGGTTCTTTTAAAAGGCTATACCCTTTAGGAGCTTTTTCTTCTTTTATAAAGTAATCTCCTTCTTTTAAACCAGTAAATATAACTCGTCCATTTTTATCAGTTACACCCTTTCCTTTTAATAAAACCACATTTCCAGTAGAATCATACGTATATTTACCAATTACATTACCATTTTTATCCCTAACAGAAAAAGCTGCGCCTGCAAGATCTATTGAAATATTTTCTGAATCTACTTTTTTAACTCCGAATCCCCATGTATAAGTTGTTACTTTATCTTCTAAAACTTTATAGTTTGATTCTAAATCGTGATCTTTGGTAGAGATAAGTG'

    trail.add_node node, Graph::OrientedNodeTrail::START_IS_FIRST
    expected_seq = 'CACTTATCTCTACCAAAGATCACGATTTAGAATCAAACTATAAAGTTTTAGAAGATAAAG
TAACAACTTATACATGGGGATTCGGAGTTAAAAAAGTAGATTCAGAAAATATTTCAATAG
ATCTTGCAGGCGCAGCTTTTTCTGTTAGGGATAAAAATGGTAATGTAATTGGTAAATATA
CGTATGATTCTACTGGAAATGTGGTTTTATTAAAAGGAAAGGGTGTAACTGATAAAAATG
GACGAGTTATATTTACTGGTTTAAAAGAAGGAGATTACTTTATAAAAGAAGAAAAAGCTC
CTAAAGGGTATAGCCTTTTAAAAGAACCAGTAAAAGTTACTATAACAGCTCAAAAAGATG
ATAATGGAGAGTATACTGGTCAAGCAACTATATCTGTAACTAATGGCAATGAAGCTGGAA
GTATAATAAATAATATTACTATGAATGATGGCAATGTATTATTTAATGTACAAATTAAAA
ACTATGCTGGTATTTCACTTCCAGGTACAGG'.gsub(/\n/,'')
    trail.sequence.should eq(expected_seq)

    trail = Graph::OrientedNodeTrail.new
    trail.add_node node, Graph::OrientedNodeTrail::END_IS_FIRST
    trail.sequence.should == expected_seq.revcom
  end

  it 'should sequence properly with multiple nodes' do
  fail
    graph = Bio::Velvet::Graph.parse_from_file File.join(TEST_DATA_DIR, 'short_node_sequence_test_graph')
    graph.should be_kind_of(Bio::Velvet::Graph)

    exp = 'TCCTCAGCATGTTTGTTATTTATGACGTATCAAACAAAACTGAGGACATGTGAAATAACCCCGAATGAGAATATATGCTTTCCTATTGGAACGATTCTTGCTGTAAAAAACAAATATGA'+
      'AAAGTTACACTTTTCAGGTGT'+
      'TTTTG'+
      'AGAAATACAA'
    exp = exp.revcom

    graph.nodes[61].sequence.should == exp
  end
end
